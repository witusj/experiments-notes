{
  "hash": "71c773127d218146c8bacc553714e56b",
  "result": {
    "engine": "jupyter",
    "markdown": "# `calculate_objective_serv_time_lookup` {.unnumbered}\n\n## Function Documentation\n\n`calculate_objective_serv_time_lookup(schedule: List[int], d: int, convolutions: dict) -> Tuple[float, float]`\n\n#### Description\n\nThis notebook provides documentation for the function `calculate_objective_serv_time_lookup`, which calculates an objective value (in terms of expected waiting time and expected spillover) based on a given schedule and pre-computed convolutions of a probability mass function (PMF). \n\nThe function uses the following inputs:\n\n- **schedule**: A list of integers representing the number of patients scheduled in each time slot.\n- **d**: An integer indicating the duration threshold for a time slot.\n- **convolutions**: A dictionary of precomputed convolutions of the service time PMF. The key `1` should correspond to the adjusted service time distribution (for example, one adjusted for no-shows), while keys greater than `1` are used for multiple patients in a time slot.\n\nThe function returns a tuple:\n\n- **ewt**: The sum of expected waiting times over the schedule.\n- **esp**: The expected spillover time (or overtime) after the final time slot.\n\n## Example Usage\n\nA trivial example using a precomputed convolution dictionary with a degenerate PMF (i.e. always zero service time) is provided in the unit tests below.\n\n::: {#65a2442b .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom typing import List, Dict, Tuple\nfrom functions import service_time_with_no_shows, compute_convolutions, calculate_objective_serv_time_lookup\n\n# For demonstration purposes, we use a trivial convolution dictionary.\noriginal_distribution = [0.0, 0.5, 0.3, 0.2]\nno_show_probability = 0.1\nadjusted_distribution = service_time_with_no_shows(original_distribution, no_show_probability)\nschedule_example = [2, 0, 0, 0, 0, 0, 1]\nN = sum(schedule_example)\nconvolutions_example = compute_convolutions(original_distribution, N, no_show_probability)\nd_example = 1\newt, esp = calculate_objective_serv_time_lookup(schedule_example, d_example, convolutions_example)\nprint(\"Adjusted Service Time Distribution: \", adjusted_distribution)\nprint(\"Expected Adjusted Service Time: \", np.dot(range(len(adjusted_distribution)), adjusted_distribution))\nprint(\"Expected Waiting Time:\", ewt)\nprint(\"Expected Spillover:\", esp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdjusted Service Time Distribution:  [0.1, 0.45, 0.27, 0.18000000000000002]\nExpected Adjusted Service Time:  1.53\nExpected Waiting Time: 1.53\nExpected Spillover: 0.6300000000000001\n```\n:::\n:::\n\n\n::: {#0f1cb6f6 .cell execution_count=2}\n``` {.python .cell-code}\nimport unittest\n\nclass TestCalculateObjectiveServTimeLookup(unittest.TestCase):\n    def setUp(self):\n        # Create a convolution dictionary\n        self.convolutions = convolutions_example\n        self.d = d_example\n\n    def test_single_time_slot(self):\n        # With one patient there will be no waiting and spillover (overtime) can be calculated by hand.\n        schedule = [1]\n        ewt, esp = calculate_objective_serv_time_lookup(schedule, self.d, self.convolutions)\n        self.assertAlmostEqual(ewt, 0.0, places=5, msg=\"Expected waiting time should be 0\")\n        self.assertAlmostEqual(esp, 0.6300000000000001, places=5, msg=\"Expected spillover should be 0\")\n\n    def test_zero_patients(self):\n        # If no patients are scheduled in a time slot, the process simply advances in time.\n        schedule = [0]\n        ewt, esp = calculate_objective_serv_time_lookup(schedule, self.d, self.convolutions)\n        self.assertAlmostEqual(ewt, 0.0, places=5, msg=\"Expected waiting time should be 0 when no patients\")\n        self.assertAlmostEqual(esp, 0.0, places=5, msg=\"Expected spillover should be 0 when no patients\")\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nOK\n```\n:::\n:::\n\n\n",
    "supporting": [
      "calculate-objective-serv-time-lookup_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}