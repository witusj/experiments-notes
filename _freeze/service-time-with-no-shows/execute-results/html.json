{
  "hash": "1fc7e617e0c0d1dcd8d45f4283a71470",
  "result": {
    "engine": "jupyter",
    "markdown": "# `service_time_with_no_shows` {.unnumbered}\n\nThis notebook provides documentation for the function `service_time_with_no_shows` and includes a unit test to verify its functionality.\n\n## Function Documentation\n\n`service_time_with_no_shows(s: List[float], q: float) -> List[float]`\n\n#### Description\n\nAdjusts a distribution of service times to account for no-shows. The function scales the original service time distribution by the probability of a patient showing up (i.e., `1 - q`) and then adds the no-show probability `q` to the service time for zero time slots.\n\n#### Parameters\n\n- **s** (`List[float]`): The original service time probability distribution. This list represents the probabilities associated with different service times.\n- **q** (`float`): The probability of no-shows. This value should be between 0 and 1.\n\n#### Returns\n\n- **`List[float]`**: The adjusted service time probability distribution where the no-show probability has been incorporated into the probability of zero service time.\n\n#### Example\n\n::: {#c2a0303b .cell execution_count=1}\n``` {.python .cell-code}\nfrom functions import service_time_with_no_shows\n\n# Example usage\noriginal_distribution = [0.0, 0.5, 0.3, 0.2]\nno_show_probability = 0.1\nadjusted_distribution = service_time_with_no_shows(original_distribution, no_show_probability)\nprint(\"Adjusted distribution:\", adjusted_distribution)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdjusted distribution: [0.1, 0.45, 0.27, 0.18000000000000002]\n```\n:::\n:::\n\n\n::: {#9378095a .cell execution_count=2}\n``` {.python .cell-code}\nimport unittest\n\nclass TestServiceTimeWithNoShows(unittest.TestCase):\n    def test_adjust_distribution(self):\n        # Test with a known distribution and no-show probability\n        original_distribution = [0.0, 0.5, 0.3, 0.2]\n        no_show_probability = 0.1\n        \n        # Expected adjustment: second element 0.1, \n        # other elements: multiplied by 0.9\n        expected_distribution = [0.1, 0.45, 0.27, 0.18]\n        \n        result = service_time_with_no_shows(original_distribution, no_show_probability)\n        \n        # Using almost equal check due to floating point arithmetic\n        for r, e in zip(result, expected_distribution):\n            self.assertAlmostEqual(r, e, places=5)\n\nif __name__ == '__main__':\n    unittest.main(argv=[''], exit=False)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n```\n:::\n:::\n\n\n",
    "supporting": [
      "service-time-with-no-shows_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}