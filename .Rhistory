)
# Try all possible start/tail combinations that sum to target_sum
for s in range(target_sum + 1):
schedule_parts = [s]  # Start with the start count
t = target_sum - s
schedule_parts.extend(center_schedule_segment)
schedule_parts.append(t)
ewt, esp = calculate_objective_serv_time_lookup(
schedule_parts, d_interval_len, convolutions_projections_fig6
)
new_objective_value = w_fig6 * ewt + (1 - w_fig6) * esp
if new_objective_value < lowest_objective_value:
lowest_objective_value = new_objective_value
best_schedule = schedule_parts
print(f"New lowest objective value found: {lowest_objective_value} for target_sum={target_sum}, schedule={schedule_parts}. Sum schedule={sum(schedule_parts)}")
found_lower = True
if not found_lower:
print(f"No lower objective value found for target_sum={target_sum}. Stopping search.\nBest schedule so far: {best_schedule} with objective value {lowest_objective_value}")
break
target_sum += 1
v_star = get_v_star(T_intervals_fig6)
x_star, c_star, log = local_search_w_timer(best_schedule, d_interval_len, convolutions_projections_fig6, w_fig6, v_star, T_intervals_fig6, time_limit = 10, process_start_time = time.time(), echo = False)
print(f"Final best schedule found: {x_star} with objective value {c_star}")
#| code-fold: true
# --- Plotting ---
# Run the optimization and get the log
# --- Run 1: Heuristic + Local Search ---
heuristic_log, total_time = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=ls_time_limit
)
# --- Run 2: Local Search Only (for the same total duration) ---
ls_only_log, _ = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=total_time, # Use same total time as the first run
start_with_heuristic=False
)
# --- Combine logs and Plot ---
full_log = heuristic_log + ls_only_log
df = pd.DataFrame(full_log)
fig6 = go.Figure()
colors = {
'heuristic': '#636EFA',
'local_search': '#00CC96',
'local_search_from_start': '#EF553B'
}
for source_name, group in df.groupby('source'):
fig6.add_trace(go.Scatter(
x=group['time_elapsed'], y=group['cost'],
name=source_name, mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)),
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
fig6.update_layout(
title="Optimization Strategy Comparison",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig6.show()
#| code-fold: true
#| label: Figure 6 - Local search on a schedule with a fixed start and tail
# --- Parameters for fig6 ---
N_patients_fig6 = 70
T_intervals_fig6 = 80
q_fig6 = 0.1
w_fig6 = 0.5
convolutions_projections_fig6 = compute_convolutions(s_dist, N_patients_fig6, q_fig6)
ls_time_limit = 10
target_sum = max(0, N_patients_fig6 - T_intervals_fig6 + 2)  # Initialize start + taol sum. Start from max(0, N - (T - 2)) to ensure non-negative start
stop_sum = 30
lowest_objective_value = float('inf')  # Initialize to a very high value
while target_sum <= stop_sum:
found_lower = False
num_center_patients = N_patients_fig6 - target_sum # Patients in the center part
num_center_intervals = T_intervals_fig6 - 2 # Intervals available for the center part
if num_center_patients < 0: # Should not happen if generate_start_tail_distribution is correct
# print(f"Warning: Negative center patients ({num_center_patients}) for start={start_count}, tail={tail_count}. Skipping.")
continue
if num_center_intervals < 0:
if num_center_patients > 0:
# print(f"Warning: Cannot schedule {num_center_patients} center patients in {num_center_intervals} intervals. Skipping.")
continue
# If num_center_patients is 0 and num_center_intervals is < 0, center_schedule should be empty.
center_schedule_segment = []
elif num_center_patients == 0: # No patients for the center part
center_schedule_segment = [0] * num_center_intervals
else:
center_schedule_segment = generate_evenly_distributed_schedule_intervals(
num_center_patients,
num_center_intervals
)
# Try all possible start/tail combinations that sum to target_sum
for s in range(target_sum + 1):
schedule_parts = [s]  # Start with the start count
t = target_sum - s
schedule_parts.extend(center_schedule_segment)
schedule_parts.append(t)
ewt, esp = calculate_objective_serv_time_lookup(
schedule_parts, d_interval_len, convolutions_projections_fig6
)
new_objective_value = w_fig6 * ewt + (1 - w_fig6) * esp
if new_objective_value < lowest_objective_value:
lowest_objective_value = new_objective_value
best_schedule = schedule_parts
print(f"New lowest objective value found: {lowest_objective_value} for target_sum={target_sum}, schedule={schedule_parts}. Sum schedule={sum(schedule_parts)}")
found_lower = True
if not found_lower:
print(f"No lower objective value found for target_sum={target_sum}. Stopping search.\nBest schedule so far: {best_schedule} with objective value {lowest_objective_value}")
break
target_sum += 1
v_star = get_v_star(T_intervals_fig6)
x_star, c_star, log = local_search_w_timer(best_schedule, d_interval_len, convolutions_projections_fig6, w_fig6, v_star, T_intervals_fig6, time_limit = 10, process_start_time = time.time(), echo = False)
print(f"Final best schedule found: {x_star} with objective value {c_star}")
#| code-fold: true
# --- Plotting ---
# Run the optimization and get the log
# --- Run 1: Heuristic + Local Search ---
heuristic_log, total_time = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=ls_time_limit
)
# --- Run 2: Local Search Only (for the same total duration) ---
ls_only_log, _ = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=total_time, # Use same total time as the first run
start_with_heuristic=False
)
# --- Combine logs and Plot ---
full_log = heuristic_log + ls_only_log
df = pd.DataFrame(full_log)
fig6 = go.Figure()
colors = {
'heuristic': '#636EFA',
'local_search': '#00CC96',
'local_search_from_start': '#EF553B'
}
for source_name, group in df.groupby('source'):
fig6.add_trace(go.Scatter(
x=group['time_elapsed'], y=group['cost'],
name=source_name, mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)),
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
fig6.update_layout(
title="Optimization Strategy Comparison",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig6.show()
#| code-fold: true
#| label: Figure 5 - Local search on a schedule with a fixed start and tail
# --- Parameters for fig3 ---
N_patients_fig5 = 24
T_intervals_fig5 = 48
q_fig5 = 0.1
w_fig5 = 0.5
convolutions_projections_fig5 = compute_convolutions(s_dist, N_patients_fig5, q_fig5)
ls_time_limit = 10
target_sum = max(0, N_patients_fig5 - T_intervals_fig5 + 2)  # Initialize start + tail sum. Start from max(0, N - (T - 2)) to ensure non-negative start
stop_sum = 30
lowest_objective_value = float('inf')  # Initialize to a very high value
while target_sum <= stop_sum:
found_lower = False
num_center_patients = N_patients_fig5 - target_sum # Patients in the center part
num_center_intervals = T_intervals_fig5 - 2 # Intervals available for the center part
if num_center_patients < 0: # Should not happen if generate_start_tail_distribution is correct
# print(f"Warning: Negative center patients ({num_center_patients}) for start={start_count}, tail={tail_count}. Skipping.")
continue
if num_center_intervals < 0:
if num_center_patients > 0:
# print(f"Warning: Cannot schedule {num_center_patients} center patients in {num_center_intervals} intervals. Skipping.")
continue
# If num_center_patients is 0 and num_center_intervals is < 0, center_schedule should be empty.
center_schedule_segment = []
elif num_center_patients == 0: # No patients for the center part
center_schedule_segment = [0] * num_center_intervals
else:
center_schedule_segment = generate_evenly_distributed_schedule_intervals(
num_center_patients,
num_center_intervals
)
# Try all possible start/tail combinations that sum to target_sum
for s in range(target_sum + 1):
schedule_parts = [s]  # Start with the start count
t = target_sum - s
schedule_parts.extend(center_schedule_segment)
schedule_parts.append(t)
ewt, esp = calculate_objective_serv_time_lookup(
schedule_parts, d_interval_len, convolutions_projections_fig5
)
new_objective_value = w_fig5 * ewt + (1 - w_fig5) * esp
if new_objective_value < lowest_objective_value:
lowest_objective_value = new_objective_value
best_schedule = schedule_parts
print(f"New lowest objective value found: {lowest_objective_value} for target_sum={target_sum}, schedule={schedule_parts}. Sum schedule={sum(schedule_parts)}")
found_lower = True
if not found_lower:
print(f"No lower objective value found for target_sum={target_sum}. Stopping search.\nBest schedule so far: {best_schedule} with objective value {lowest_objective_value}")
break
target_sum += 1
v_star = get_v_star(T_intervals_fig5)
x_star, c_star, log = local_search_w_timer(best_schedule, d_interval_len, convolutions_projections_fig5, w_fig5, v_star, T_intervals_fig5, time_limit = 10, process_start_time = time.time(), echo = False)
print(f"Final best schedule found: {x_star} with objective value {c_star}")
#| code-fold: true
def find_optimal_schedule(
N_patients: int,                    # Total number of patients to schedule
T_intervals: int,                   # Total number of time intervals available
d_interval_len: int,                # Duration of each interval (in minutes)
w: float,                          # Weight parameter: w*EWT + (1-w)*ESP (0 ≤ w ≤ 1)
convolutions_projections: Dict,     # Pre-computed service time distributions for objective calculation
heuristic_stop_limit: int = 20,    # Maximum target sum to explore in heuristic search
local_search_time_limit: int = 60, # Time limit (seconds) for local search phase
start_with_heuristic: bool = True   # Whether to use heuristic initialization vs simple start
) -> Tuple[List[Dict], float]:
"""
Finds an optimal patient schedule using a two-stage approach:
1. Heuristic Search: Systematically explores schedules with different start/tail patterns
2. Local Search: Refines the best heuristic solution using neighborhood exploration
The function logs all intermediate best solutions for analysis and plotting.
Returns:
optimization_log: List of dict entries with 'schedule', 'cost', 'source', 'time_elapsed'
total_time_taken: Total optimization time in seconds
"""
# Initialize timing and logging
total_start_time = time.time()
optimization_log = []
# === INITIALIZATION STRATEGY SELECTION ===
if start_with_heuristic:
print(f"🚀 Starting optimization for {N_patients} patients with Heuristic Search.")
# --- Stage 1: Heuristic Search ---
print("\n--- Stage 1: Heuristic Search ---")
lowest_objective_value = float('inf')
# Calculate minimum start+tail sum needed to ensure feasible center distribution
# Logic: If we have more patients than interior intervals, some must go to start/tail
start_target_sum = max(0, N_patients - T_intervals + 2)
num_center_intervals = T_intervals - 2  # Interior intervals (excluding first and last)
# Systematic exploration of start+tail combinations
for target_sum in range(start_target_sum, heuristic_stop_limit + 1):
# Calculate how many patients go in the center intervals
num_center_patients = N_patients - target_sum
if num_center_patients < 0:
continue  # Skip if target_sum exceeds total patients
# Generate evenly distributed schedule for center intervals
center_schedule = generate_evenly_distributed_schedule_intervals(
num_center_patients, num_center_intervals
)
# Try all possible start/tail combinations that sum to target_sum
for s in range(target_sum + 1):  # s = patients in first interval
t = target_sum - s           # t = patients in last interval
# Construct full schedule: [start, center_intervals..., tail]
candidate_schedule = [s, *center_schedule, t] if T_intervals > 1 else [N_patients]
# Evaluate objective function: w*EWT + (1-w)*ESP
ewt, esp = calculate_objective_serv_time_lookup(
candidate_schedule, d_interval_len, convolutions_projections
)
current_objective = w * ewt + (1 - w) * esp
# Track new best solutions
if current_objective < lowest_objective_value:
lowest_objective_value = current_objective
time_elapsed = time.time() - total_start_time
# Log this improvement for analysis
log_entry = {
"schedule": candidate_schedule,
"cost": lowest_objective_value,
"source": "heuristic",
"time_elapsed": time_elapsed
}
optimization_log.append(log_entry)
# Handle case where heuristic search fails
if not optimization_log:
print("\nHeuristic search could not find a valid initial schedule.")
# Fallback: put all patients in first interval
initial_schedule = [N_patients] + [0] * (T_intervals - 1)
else:
# Use the best schedule found by heuristic search
initial_schedule = optimization_log[-1]['schedule']
print(f"\n✅ Stage 1 Complete. Best Heuristic Schedule: {initial_schedule}")
else:
# === NON-HEURISTIC START: Use same initial candidate for fair comparison ===
print(f"🚀 Starting optimization for {N_patients} patients with Local Search only.")
# Create the same starting schedule that heuristic would begin with
if T_intervals > 1:
# Start with minimum feasible start+tail sum
start_target_sum = max(0, N_patients - T_intervals + 2)
num_center_intervals = T_intervals - 2
num_center_patients = N_patients - start_target_sum
# Generate center distribution
center_schedule = []
if num_center_intervals > 0 and num_center_patients >= 0:
center_schedule = generate_evenly_distributed_schedule_intervals(
num_center_patients, num_center_intervals
)
# Use conservative start: all target_sum patients in tail
s = 0
t = start_target_sum
initial_schedule = [s, *center_schedule, t]
else:
# Single interval case
initial_schedule = [N_patients]
# Safety check for schedule validity
if sum(initial_schedule) != N_patients:
print(f"Warning: Calculated initial schedule {initial_schedule} sums to {sum(initial_schedule)}, not {N_patients}. Falling back to naive.")
initial_schedule = [N_patients] + [0] * (T_intervals - 1)
print(f"Using heuristic's first candidate as starting schedule: {initial_schedule}")
# === Stage 2: Local Search Refinement ===
print("\n--- Stage 2: Local Search Refinement ---")
if local_search_time_limit > 0 and T_intervals > 1:
# Perform neighborhood-based local search starting from initial_schedule
_, _, local_search_log = local_search_w_timer(
initial_schedule,              # Starting point
d_interval_len,               # Interval duration
convolutions_projections,     # Service time distributions
w,                           # Objective weight
v_star=get_v_star(T_intervals),  # Search neighborhood parameter
size=T_intervals,            # Schedule size
time_limit=local_search_time_limit,  # Time budget
process_start_time=total_start_time, # For consistent timing
echo=False                   # Suppress verbose output
)
# Label log entries based on initialization strategy
source_label = "local_search" if start_with_heuristic else "local_search_from_start"
for entry in local_search_log:
entry["source"] = source_label
# Combine heuristic and local search logs
optimization_log.extend(local_search_log)
# === COMPLETION AND SUMMARY ===
total_time_taken = time.time() - total_start_time
if optimization_log:
best_schedule = optimization_log[-1]['schedule']
best_cost = optimization_log[-1]['cost']
print(f"\n🏁 Optimization complete in {total_time_taken:.2f} seconds.")
print(f"Best schedule found: {best_schedule} with cost {best_cost:.4f}")
else:
print(f"\n⚠️ Optimization complete in {total_time_taken:.2f} seconds, but no valid schedule found.")
return optimization_log, total_time_taken
# --- Plotting ---
# Run the optimization and get the log
# --- Run 1: Heuristic + Local Search ---
heuristic_log, total_time = find_optimal_schedule(
N_patients=N_patients_fig5,
T_intervals=T_intervals_fig5,
d_interval_len=d_interval_len,
w=w_fig5,
convolutions_projections=convolutions_projections_fig5,
heuristic_stop_limit=N_patients_fig5,
local_search_time_limit=ls_time_limit
)
# --- Run 2: Local Search Only (for the same total duration) ---
ls_only_log, _ = find_optimal_schedule(
N_patients=N_patients_fig5,
T_intervals=T_intervals_fig5,
d_interval_len=d_interval_len,
w=w_fig5,
convolutions_projections=convolutions_projections_fig5,
heuristic_stop_limit=N_patients_fig5,
local_search_time_limit=total_time, # Use same total time as the first run
start_with_heuristic=False
)
# --- Combine logs and Plot ---
full_log = heuristic_log + ls_only_log
df = pd.DataFrame(full_log)
fig5 = go.Figure()
colors = {
'heuristic': '#636EFA',
'local_search': '#00CC96',
'local_search_from_start': '#EF553B'
}
for source_name, group in df.groupby('source'):
fig5.add_trace(go.Scatter(
x=group['time_elapsed'], y=group['cost'],
name=source_name, mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)),
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
fig5.update_layout(
title="Optimization Strategy Comparison",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig5.show()
#| code-fold: true
#| label: Figure 6 - Local search on a schedule with a fixed start and tail
# --- Parameters for fig6 ---
N_patients_fig6 = 70
T_intervals_fig6 = 80
q_fig6 = 0.1
w_fig6 = 0.5
convolutions_projections_fig6 = compute_convolutions(s_dist, N_patients_fig6, q_fig6)
ls_time_limit = 10
target_sum = max(0, N_patients_fig6 - T_intervals_fig6 + 2)  # Initialize start + taol sum. Start from max(0, N - (T - 2)) to ensure non-negative start
stop_sum = 30
lowest_objective_value = float('inf')  # Initialize to a very high value
while target_sum <= stop_sum:
found_lower = False
num_center_patients = N_patients_fig6 - target_sum # Patients in the center part
num_center_intervals = T_intervals_fig6 - 2 # Intervals available for the center part
if num_center_patients < 0: # Should not happen if generate_start_tail_distribution is correct
# print(f"Warning: Negative center patients ({num_center_patients}) for start={start_count}, tail={tail_count}. Skipping.")
continue
if num_center_intervals < 0:
if num_center_patients > 0:
# print(f"Warning: Cannot schedule {num_center_patients} center patients in {num_center_intervals} intervals. Skipping.")
continue
# If num_center_patients is 0 and num_center_intervals is < 0, center_schedule should be empty.
center_schedule_segment = []
elif num_center_patients == 0: # No patients for the center part
center_schedule_segment = [0] * num_center_intervals
else:
center_schedule_segment = generate_evenly_distributed_schedule_intervals(
num_center_patients,
num_center_intervals
)
# Try all possible start/tail combinations that sum to target_sum
for s in range(target_sum + 1):
schedule_parts = [s]  # Start with the start count
t = target_sum - s
schedule_parts.extend(center_schedule_segment)
schedule_parts.append(t)
ewt, esp = calculate_objective_serv_time_lookup(
schedule_parts, d_interval_len, convolutions_projections_fig6
)
new_objective_value = w_fig6 * ewt + (1 - w_fig6) * esp
if new_objective_value < lowest_objective_value:
lowest_objective_value = new_objective_value
best_schedule = schedule_parts
print(f"New lowest objective value found: {lowest_objective_value} for target_sum={target_sum}, schedule={schedule_parts}. Sum schedule={sum(schedule_parts)}")
found_lower = True
if not found_lower:
print(f"No lower objective value found for target_sum={target_sum}. Stopping search.\nBest schedule so far: {best_schedule} with objective value {lowest_objective_value}")
break
target_sum += 1
v_star = get_v_star(T_intervals_fig6)
x_star, c_star, log = local_search_w_timer(best_schedule, d_interval_len, convolutions_projections_fig6, w_fig6, v_star, T_intervals_fig6, time_limit = 10, process_start_time = time.time(), echo = False)
print(f"Final best schedule found: {x_star} with objective value {c_star}")
#| code-fold: true
# --- Plotting ---
# Run the optimization and get the log
# --- Run 1: Heuristic + Local Search ---
heuristic_log, total_time = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=ls_time_limit
)
# --- Run 2: Local Search Only (for the same total duration) ---
ls_only_log, _ = find_optimal_schedule(
N_patients=N_patients_fig6,
T_intervals=T_intervals_fig6,
d_interval_len=d_interval_len,
w=w_fig6,
convolutions_projections=convolutions_projections_fig6,
heuristic_stop_limit=N_patients_fig6,
local_search_time_limit=total_time, # Use same total time as the first run
start_with_heuristic=False
)
# --- Combine logs and Plot ---
full_log = heuristic_log + ls_only_log
df = pd.DataFrame(full_log)
fig6 = go.Figure()
colors = {
'heuristic': '#636EFA',
'local_search': '#00CC96',
'local_search_from_start': '#EF553B'
}
for source_name, group in df.groupby('source'):
fig6.add_trace(go.Scatter(
x=group['time_elapsed'], y=group['cost'],
name=source_name, mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)),
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
fig6.update_layout(
title="Optimization Strategy Comparison",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig6.show()
