import numpy as np
import json
import time
from itertools import chain, combinations
import sys
from math import comb  # Python 3.8 and later
import xgboost as xgb
import pickle
from typing import List, Tuple, Dict, Iterable, TypeVar, Union, Any
import logging
import sys # Needed for StreamHandler in order to enable explicit console output
# Logging configuration
log_level = logging.DEBUG
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# Log to a file instead of to the console:
logging.basicConfig(level=log_level, format=log_format, filename='search.log', filemode='w')
# Get a logger instance
logger = logging.getLogger(__name__)
N = 22 # Number of patients
T = 20 # Number of intervals
l = 10 # Target service time length
file_path_parameters = f"datasets/parameters_{N}_{T}_{l}.pkl" # For retrieving saved scheduling parameters
# Load the data from the pickle file
with open(file_path_parameters, 'rb') as f:
data_params = pickle.load(f)
N = data_params['N'] # Number of patients
T = data_params['T'] # Number of intervals
d = data_params['d'] # Length of each interval
max_s = data_params['max_s'] # Maximum service time
q = data_params['q'] # Probability of a scheduled patient not showing up
w = data_params['w'] # Weight for the waiting time in objective function
l = data_params['l']
num_schedules = data_params['num_schedules'] # Size of training set
convolutions = data_params['convolutions'] # Service time distributions used in training phase adjusted for no-shows
print(f"Parameters loaded: N={N}, T={T}, l={l}, d={d}, max_s={max_s}, q={q}, w={w}, num_schedules={num_schedules}")
# Load the best solution from the training dataset
file_path_schedules = f"datasets/best_schedule_{N}_{T}_{l}.pkl"
# Load the data from the pickle file
with open(file_path_schedules, 'rb') as f:
best_schedule_data = pickle.load(f)
print(f"The data has following keys: {[key for key in best_schedule_data.keys()]}")
print(f"The current best schedule is: {best_schedule_data['best_schedule']} with objective value {best_schedule_data['objective']}.")
# Set the initial schedule to the best solution from the training dataset
initial_schedule = best_schedule_data['best_schedule']
reticulate::repl_python()
reticulate::repl_python()
