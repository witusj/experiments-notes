print("Skipping local search.")
total_time_taken = time.time() - total_start_time
print(f"\nüèÅ Optimization complete in {total_time_taken:.2f} seconds.")
if optimization_log:
final_entry = optimization_log[-1]
print(f"üèÜ Final Best Schedule: {final_entry['schedule']} | Cost: {final_entry['cost']:.4f}")
return optimization_log
# Run the optimization
log_data = find_optimal_schedule(
N_patients_single_case,
T_intervals,
d_interval_len,
w_single_case,
convolutions_projections
)
# Convert log to a pandas DataFrame for easy plotting
df = pd.DataFrame(log_data)
# Create the convergence plot using graph objects
fig = go.Figure()
# Define colors for the sources
colors = {'heuristic': '#636EFA', 'local_search': '#EF553B'}
# Add a trace for each source category
for source_name, group in df.groupby('source'):
fig.add_trace(go.Scatter(
x=group['time_elapsed'],
y=group['cost'],
name=source_name,
mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)), # Use step-like lines
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
# Update the layout for a clean look
fig.update_layout(
title="Optimization Convergence Over Time",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig.show()
#| code-fold: true
def powerset(iterable, t):
"""Generates all subsets of a specific size `t` from an iterable."""
s = list(iterable)
return chain.from_iterable(combinations(s, r) for r in [t])
def get_neighborhood(x, v_star, ids_gen):
"""Generates a neighborhood of solutions."""
neighborhood = []
# This logic can create very large neighborhoods. For this example,
# we'll simplify v_star to keep it manageable.
for ids in ids_gen:
for v in v_star:
# Ensure the move is valid for the chosen indices
if len(ids) != len(v): continue
neighbor = x.copy()
valid = True
for i, idx in enumerate(ids):
if neighbor[idx] + v[i] < 0:
valid = False
break
neighbor[idx] += v[i]
if valid and sum(neighbor) == sum(x):
neighborhood.append(neighbor)
# Return unique neighbors
if not neighborhood:
return np.array([])
return np.unique(np.array(neighborhood), axis=0)
def generate_evenly_distributed_schedule_intervals(n_patients: int, n_intervals: int) -> List[int]:
"""Generates a schedule with patients distributed as evenly as possible."""
if n_intervals <= 0: raise ValueError("Number of intervals must be positive.")
if n_patients < 0: raise ValueError("Number of patients cannot be negative.")
base, extra = divmod(n_patients, n_intervals)
return [base + 1] * extra + [base] * (n_intervals - extra)
def find_optimal_schedule(
N_patients: int, T_intervals: int, d_interval_len: int, w: float,
convolutions_projections: Dict, heuristic_stop_limit: int = 20,
local_search_time_limit: int = 60
) -> List[Dict]:
"""
Finds an optimal patient schedule, logging all intermediate best solutions.
Returns:
A list of dictionaries, where each entry represents an improvement
found during the optimization process.
"""
total_start_time = time.time()
optimization_log = []
print(f"üöÄ Starting optimization for {N_patients} patients in {T_intervals} intervals.")
if T_intervals < 1:
print("Error: Must have at least one time interval.")
return []
# --- Stage 1: Heuristic Search ---
print("\n--- Stage 1: Heuristic Search ---")
lowest_objective_value = float('inf')
start_target_sum = max(0, N_patients - T_intervals + 2)
num_center_intervals = T_intervals - 2
for target_sum in range(start_target_sum, heuristic_stop_limit + 1):
num_center_patients = N_patients - target_sum
if num_center_patients < 0:
print(f"Target sum {target_sum} is too high. Stopping heuristic.")
break
center_schedule = []
if num_center_intervals > 0:
center_schedule = generate_evenly_distributed_schedule_intervals(num_center_patients, num_center_intervals)
elif num_center_patients > 0:
continue
for s in range(target_sum + 1):
t = target_sum - s
# Handle edge case of T_intervals < 2
if T_intervals == 1:
candidate_schedule = [N_patients]
else:
candidate_schedule = [s, *center_schedule, t]
ewt, esp = calculate_objective_serv_time_lookup(candidate_schedule, d_interval_len, convolutions_projections)
current_objective = w * ewt + (1 - w) * esp
if current_objective < lowest_objective_value:
lowest_objective_value = current_objective
time_elapsed = time.time() - total_start_time
log_entry = {
"schedule": candidate_schedule,
"cost": lowest_objective_value,
"source": "heuristic",
"time_elapsed": time_elapsed
}
optimization_log.append(log_entry)
print(f"Heuristic found new best: cost={lowest_objective_value:.4f}, schedule={candidate_schedule}")
if not optimization_log:
print("\nHeuristic search could not find a valid initial schedule.")
return []
best_schedule_heuristic = optimization_log[-1]['schedule']
print(f"\n‚úÖ Stage 1 Complete. Best Heuristic Schedule: {best_schedule_heuristic}")
# --- Stage 2: Local Search Refinement ---
print("\n--- Stage 2: Local Search Refinement ---")
if local_search_time_limit > 0 and T_intervals > 1:
v_star = get_v_star(T_intervals)
_, _, local_search_log = local_search_w_timer(
best_schedule_heuristic, d_interval_len, convolutions_projections, w, v_star,
size=T_intervals, time_limit=local_search_time_limit,
process_start_time=total_start_time, echo=True
)
optimization_log.extend(local_search_log)
else:
print("Skipping local search.")
total_time_taken = time.time() - total_start_time
print(f"\nüèÅ Optimization complete in {total_time_taken:.2f} seconds.")
if optimization_log:
final_entry = optimization_log[-1]
print(f"üèÜ Final Best Schedule: {final_entry['schedule']} | Cost: {final_entry['cost']:.4f}")
return optimization_log
# Run the optimization
log_data = find_optimal_schedule(
N_patients_single_case,
T_intervals,
d_interval_len,
w_single_case,
convolutions_projections
)
# Convert log to a pandas DataFrame for easy plotting
df = pd.DataFrame(log_data)
# Create the convergence plot using graph objects
fig = go.Figure()
# Define colors for the sources
colors = {'heuristic': '#636EFA', 'local_search': '#EF553B'}
# Add a trace for each source category
for source_name, group in df.groupby('source'):
fig.add_trace(go.Scatter(
x=group['time_elapsed'],
y=group['cost'],
name=source_name,
mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)), # Use step-like lines
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
# Update the layout for a clean look
fig.update_layout(
title="Optimization Convergence Over Time",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig.show()
#| code-fold: true
import time
import numpy as np
import pandas as pd
from typing import List, Dict, Tuple, Optional, Union
from itertools import chain, combinations
# --- Helper functions (using real logic for local search) ---
def powerset(iterable, t):
"""Generates all subsets of a specific size `t` from an iterable."""
s = list(iterable)
return chain.from_iterable(combinations(s, r) for r in [t])
def get_neighborhood(x, v_star, ids_gen):
"""Generates a neighborhood of solutions."""
neighborhood = []
# This logic can create very large neighborhoods. For this example,
# we'll simplify v_star to keep it manageable.
for ids in ids_gen:
for v in v_star:
# Ensure the move is valid for the chosen indices
if len(ids) != len(v): continue
neighbor = x.copy()
valid = True
for i, idx in enumerate(ids):
if neighbor[idx] + v[i] < 0:
valid = False
break
neighbor[idx] += v[i]
if valid and sum(neighbor) == sum(x):
neighborhood.append(neighbor)
# Return unique neighbors
if not neighborhood:
return np.array([])
return np.unique(np.array(neighborhood), axis=0)
def generate_evenly_distributed_schedule_intervals(n_patients: int, n_intervals: int) -> List[int]:
"""Generates a schedule with patients distributed as evenly as possible."""
if n_intervals <= 0: raise ValueError("Number of intervals must be positive.")
if n_patients < 0: raise ValueError("Number of patients cannot be negative.")
base, extra = divmod(n_patients, n_intervals)
return [base + 1] * extra + [base] * (n_intervals - extra)
def calculate_objective_serv_time_lookup(schedule: List[int], d: int, conv: Dict) -> Tuple[float, float]:
"""Calculates the two objective components for a given schedule."""
total_patients = sum(schedule)
ewt = np.sum(np.array(schedule) * np.arange(len(schedule))) / total_patients if total_patients > 0 else 0
esp = max(0, total_patients - (d * 0.95))
return ewt, esp
def get_v_star(T_intervals: int) -> np.ndarray:
"""Generates adjustment vectors for local search.
This version creates vectors for moving one patient between any two slots.
"""
if T_intervals < 2: return np.array([])
v_star = []
# This simplified v_star only considers swapping between two adjacent slots
# A full implementation would be combinations(range(T_intervals), 2)
# which can be very large.
for i in range(T_intervals - 1):
v = np.zeros(T_intervals, dtype=int)
v[i] = -1
v[i+1] = 1
v_star.append(v)
v_star.append(-v)
return np.array(v_star)
def local_search_w_timer(
x: Union[List[int], np.ndarray], d: int, convolutions: Dict, w: float,
v_star: np.ndarray, size: int, time_limit: Optional[int],
process_start_time: float, echo: bool = False
) -> Tuple[np.ndarray, float, List[Dict]]:
"""
Performs local search, logging all improvements found.
"""
local_search_start_time = time.time()
x_star = np.array(x).flatten()
ewt, esp = calculate_objective_serv_time_lookup(x_star, d, convolutions)
c_star = w * ewt + (1 - w) * esp
log = []
T = len(x_star)
t = 1
while t <= size:
time_since_start = time.time() - local_search_start_time
if time_limit is not None and time_since_start > time_limit:
if echo: print(f"Local search time limit of {time_limit}s reached.")
break
if echo: print(f'LS: Switching {t} patient(s)')
# For this example, we'll use a simpler neighborhood generation
# to ensure it runs fast. We only check swaps between adjacent slots.
ids_gen = combinations(range(T), 2)
found_better_solution = False
neighborhood = get_neighborhood(x_star, v_star, ids_gen)
for neighbor in neighborhood:
if time_limit is not None and (time.time() - local_search_start_time) > time_limit:
break
waiting_time, spillover = calculate_objective_serv_time_lookup(neighbor, d, convolutions)
cost = w * waiting_time + (1 - w) * spillover
if cost < c_star:
x_star = neighbor
c_star = cost
# Log the improvement
time_elapsed = time.time() - process_start_time
log_entry = {
"schedule": x_star.tolist(),
"cost": c_star,
"source": "local_search",
"time_elapsed": time_elapsed
}
log.append(log_entry)
if echo: print(f"LS found better solution: cost={c_star:.4f} at {time_elapsed:.2f}s")
found_better_solution = True
break  # First improvement strategy
if found_better_solution:
t = 1  # Restart with smallest neighborhood
else:
t += 1
return x_star, c_star, log
# --- Main Function with Integrated Logging ---
def find_optimal_schedule(
N_patients: int, T_intervals: int, d_interval_len: int, w: float,
convolutions_projections: Dict, heuristic_stop_limit: int = 20,
local_search_time_limit: int = 60
) -> List[Dict]:
"""
Finds an optimal patient schedule, logging all intermediate best solutions.
Returns:
A list of dictionaries, where each entry represents an improvement
found during the optimization process.
"""
total_start_time = time.time()
optimization_log = []
print(f"üöÄ Starting optimization for {N_patients} patients in {T_intervals} intervals.")
if T_intervals < 1:
print("Error: Must have at least one time interval.")
return []
# --- Stage 1: Heuristic Search ---
print("\n--- Stage 1: Heuristic Search ---")
lowest_objective_value = float('inf')
start_target_sum = max(0, N_patients - T_intervals + 2)
num_center_intervals = T_intervals - 2
for target_sum in range(start_target_sum, heuristic_stop_limit + 1):
num_center_patients = N_patients - target_sum
if num_center_patients < 0:
print(f"Target sum {target_sum} is too high. Stopping heuristic.")
break
center_schedule = []
if num_center_intervals > 0:
center_schedule = generate_evenly_distributed_schedule_intervals(num_center_patients, num_center_intervals)
elif num_center_patients > 0:
continue
for s in range(target_sum + 1):
t = target_sum - s
# Handle edge case of T_intervals < 2
if T_intervals == 1:
candidate_schedule = [N_patients]
else:
candidate_schedule = [s, *center_schedule, t]
ewt, esp = calculate_objective_serv_time_lookup(candidate_schedule, d_interval_len, convolutions_projections)
current_objective = w * ewt + (1 - w) * esp
if current_objective < lowest_objective_value:
lowest_objective_value = current_objective
time_elapsed = time.time() - total_start_time
log_entry = {
"schedule": candidate_schedule,
"cost": lowest_objective_value,
"source": "heuristic",
"time_elapsed": time_elapsed
}
optimization_log.append(log_entry)
print(f"Heuristic found new best: cost={lowest_objective_value:.4f}, schedule={candidate_schedule}")
if not optimization_log:
print("\nHeuristic search could not find a valid initial schedule.")
return []
best_schedule_heuristic = optimization_log[-1]['schedule']
print(f"\n‚úÖ Stage 1 Complete. Best Heuristic Schedule: {best_schedule_heuristic}")
# --- Stage 2: Local Search Refinement ---
print("\n--- Stage 2: Local Search Refinement ---")
if local_search_time_limit > 0 and T_intervals > 1:
v_star = get_v_star(T_intervals)
_, _, local_search_log = local_search_w_timer(
best_schedule_heuristic, d_interval_len, convolutions_projections, w, v_star,
size=T_intervals, time_limit=local_search_time_limit,
process_start_time=total_start_time, echo=True
)
optimization_log.extend(local_search_log)
else:
print("Skipping local search.")
total_time_taken = time.time() - total_start_time
print(f"\nüèÅ Optimization complete in {total_time_taken:.2f} seconds.")
if optimization_log:
final_entry = optimization_log[-1]
print(f"üèÜ Final Best Schedule: {final_entry['schedule']} | Cost: {final_entry['cost']:.4f}")
return optimization_log
# --- Example Usage & Plotting ---
if __name__ == '__main__':
# Define parameters
N_PATIENTS = 50
T_INTERVALS = 10
D_INTERVAL_LEN = 30
W_WEIGHT = 0.5
CONVOLUTIONS = {}
HEURISTIC_LIMIT = 30
LS_TIME_LIMIT = 5
# Run the optimization and get the log
log_data = find_optimal_schedule(
N_patients=N_PATIENTS, T_intervals=T_INTERVALS, d_interval_len=D_INTERVAL_LEN,
w=W_WEIGHT, convolutions_projections=CONVOLUTIONS,
heuristic_stop_limit=HEURISTIC_LIMIT, local_search_time_limit=LS_TIME_LIMIT
)
# --- Plotting with Plotly ---
if log_data:
try:
import plotly.graph_objects as go
# Convert log to a pandas DataFrame for easy plotting
df = pd.DataFrame(log_data)
# Create the convergence plot using graph objects
fig = go.Figure()
# Define colors for the sources
colors = {'heuristic': '#636EFA', 'local_search': '#EF553B'}
# Add a trace for each source category
for source_name, group in df.groupby('source'):
fig.add_trace(go.Scatter(
x=group['time_elapsed'],
y=group['cost'],
name=source_name,
mode='lines+markers',
line=dict(shape='hv', color=colors.get(source_name)), # Use step-like lines
marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey'))
))
# Update the layout for a clean look
fig.update_layout(
title="Optimization Convergence Over Time",
xaxis_title="Time Elapsed (seconds)",
yaxis_title="Objective Function Cost",
legend_title_text="Search Method",
template="plotly_white"
)
print("\nDisplaying convergence plot...")
fig.show()
except ImportError:
print("\nPlotly is not installed. To see the plot, run: pip install plotly pandas")
print("Here is the final log data:")
for entry in log_data:
print(f"- {entry}")
#| code-fold: true
# Extract data for plotting
schedules = [p[0] for p in projections_example]
objectives = [p[1] for p in projections_example]
deltas = [p[2] for p in projections_example]
# Replace None in deltas with 0 for plotting
deltas[0] = 0
# Create the chart
fig_projections = make_subplots(
rows=2, cols=1,
shared_xaxes=True,
vertical_spacing=0.1,
subplot_titles=("Objective Value per Schedule Iteration", "Change in Objective (Delta) per Iteration")
)
# Add Objective Value trace
fig_projections.add_trace(go.Scatter(
x=list(range(len(objectives))),
y=objectives,
mode='lines+markers',
name='Objective Value',
hovertemplate='<b>Iteration %{x}</b><br>Objective: %{y:.2f}<br>Schedule: %{customdata}<extra></extra>',
customdata=[str(s) for s in schedules],
marker=dict(color='royalblue')
), row=1, col=1)
# Add Delta trace
fig_projections.add_trace(go.Bar(
x=list(range(len(deltas))),
y=deltas,
name='Objective Delta',
hovertemplate='<b>Iteration %{x}</b><br>Delta: %{y:.2f}<extra></extra>',
marker=dict(color='lightcoral')
), row=2, col=1)
# Update layout
fig_projections.update_layout(
title_text='Analysis of Scheduling Projections',
height=600,
showlegend=False,
xaxis2_title='Schedule Iteration',
yaxis_title='Objective Value',
yaxis2_title='Objective Delta'
)
fig_projections.show()
#| code-fold: true
target_sum = max(0, N_patients_single_case - T_intervals + 2)  # Start from max(0, N - (T - 2)) to ensure non-negative start
stop = 20
lowest_objective_value = float('inf')  # Initialize to a very high value
while target_sum <= stop:
found_lower = False
num_center_patients = N_patients_single_case - target_sum # Patients in the center part
num_center_intervals = T_intervals - 2 # Intervals available for the center part
if num_center_patients < 0: # Should not happen if generate_start_tail_distribution is correct
# print(f"Warning: Negative center patients ({num_center_patients}) for start={start_count}, tail={tail_count}. Skipping.")
continue
if num_center_intervals < 0:
if num_center_patients > 0:
# print(f"Warning: Cannot schedule {num_center_patients} center patients in {num_center_intervals} intervals. Skipping.")
continue
# If num_center_patients is 0 and num_center_intervals is < 0, center_schedule should be empty.
center_schedule_segment = []
elif num_center_patients == 0: # No patients for the center part
center_schedule_segment = [0] * num_center_intervals
else:
center_schedule_segment = generate_evenly_distributed_schedule_intervals(
num_center_patients,
num_center_intervals
)
# generate_evenly_distributed_schedule_intervals raises ValueError on failure
# so no need to check for None if its contract is maintained.
for s in range(target_sum + 1):
schedule_parts = [s]  # Start with the start count
t = target_sum - s
schedule_parts.extend(center_schedule_segment)
schedule_parts.append(t)
ewt, esp = calculate_objective_serv_time_lookup(
schedule_parts, d_interval_len, convolutions_projections
)
new_objective_value = w_single_case * ewt + (1 - w_single_case) * esp
if new_objective_value < lowest_objective_value:
lowest_objective_value = new_objective_value
best_schedule = schedule_parts
print(f"New lowest objective value found: {lowest_objective_value} for target_sum={target_sum}, schedule={schedule_parts}. Sum schedule={sum(schedule_parts)}")
found_lower = True
if not found_lower:
print(f"No lower objective value found for target_sum={target_sum}. Stopping search.\nBest schedule so far: {best_schedule} with objective value {lowest_objective_value}")
break
target_sum += 1
v_star = get_v_star(T_intervals)
x_star, c_star = local_search_w_timer(best_schedule, d_interval_len, convolutions_projections, w_single_case, v_star, T_intervals, time_limit = 60, echo = False)
print(f"Final best schedule found: {x_star} with objective value {c_star}")
reticulate::repl_python()
