import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=N, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=3, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
T = len(x_initial)
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
T = len(x_initial)
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import unittest
import numpy as np
from functions import local_search, compute_convolutions, get_v_star
class TestLocalSearch(unittest.TestCase):
def test_local_search_improvement(self):
# Set up a simple test with a known schedule and parameters
x_initial = [3, 2, 1, 0]
T = len(x_initial)
d = 5
original_pmf = [0.0, 0.5, 0.3, 0.2]
no_show_probability = 0.1
convs = compute_convolutions(original_pmf, N=N, q=no_show_probability)
w = 0.5
v_star = get_v_star(len(x_initial))
# Perform local search
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=False)
# Verify that the returned solution has the same length as the initial schedule
self.assertEqual(len(best_solution), len(x_initial), "The optimized solution should have the same length as the initial solution.")
# Check that the cost is a float and that a solution is returned
self.assertIsInstance(best_cost, float, "Cost should be a float value.")
if __name__ == '__main__':
unittest.main(argv=[''], exit=False)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
T = len(x_initial)
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
service_time = np.zeros(11)
service_time[3] = 0.2
service_time[5] = 0.3
service_time[8] = 0.5
q = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(service_time, N=N, q=q)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
import numpy as np
from functions import local_search, calculate_objective_serv_time_lookup, compute_convolutions, get_v_star, powerset
# Example schedule: initial solution vector
x_initial = [3, 2, 1, 0]
T = len(x_initial)
N = sum(x_initial)
# Duration threshold for a time slot
d = 5
# Example probability mass function and no-show probability
service_time = np.zeros(11)
service_time[3] = 0.2
service_time[5] = 0.3
service_time[8] = 0.5
q = 0.1
# Compute convolutions (precomputed service time distributions)
convs = compute_convolutions(service_time, N=N, q=q)
# Weighting factor for the objective function
w = 0.5
# Generate adjustment vectors for the schedule (v_star)
v_star = get_v_star(len(x_initial))
# Perform local search to optimize the schedule
best_solution, best_cost = local_search(x_initial, d, convs, w, v_star, size=T, echo=True)
print("Best Solution:", best_solution)
print("Best Cost:", best_cost)
reticulate::repl_python()
